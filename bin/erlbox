#!/usr/bin/env ruby -w
# -*- ruby -*-
# Copyright (c) 2009 The Hive http://www.thehive.com/
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

require 'yaml'
require 'uri'

def erl_root(location = nil)
  cmd = "erl -noshell -eval 'io:format(\"~s\\n\", [code:root_dir()]).' -s erlang halt"
  if location
    cmd = File.join(location, "bin", cmd)
  end
  `#{cmd}`
end

def load_yaml(file)
  filename = File.expand_path(file)
  return nil if not File.exist?(filename)
  YAML::load(File.read(filename))
end

def load_config()
  # Check for existence of the config file -- we MUST have one
  config = load_yaml("~/.erlbox.yaml")

  # Load the file and make sure required parameters are present
  if config.nil? || config.empty?
    puts "~/.erlbox.yaml does not exist or is empty; basic config required!"
    exit 1
  end

  # Fix up default repo URL
  if config.has_key?('default_repo')
    url = URI(config['default_repo'])
    if url.scheme == nil or url.scheme == "file":
        config['defaut_repo'] = File.expand_path(url.path)
    end
  end

  # If erlang repo is specified, expand the path and use that to determine the root
  if config.has_key?('erlang')
    config['erlang_root'] = erl_root(File.expand_path(config['erlang'])).strip()
  else
    config['erlang_root'] = erl_root().strip()
  end

  if !config.has_key?('site_dir')
    config['site_dir'] = File.join(config['erlang_root'], "lib")
  end

  config
end

def download_app(appname, appurl, appvers)
  # Work directory will be /tmp/erlbox.<pid>
  tmpdir = "/tmp/erlbox_#{appname}.#{Process.pid}"
  
  # Clone the desired url using GIT
  # TODO: Support alternative systems
  cmd = "git clone -n #{appurl} #{tmpdir}/"
  puts cmd
  system cmd
  if $? != 0
    exit 1
  end

  # Handle git submodules
  if File.exist?("#{tmpdir}/.gitmodules")
    system "(cd #{tmpdir} && git submodule update --init)"
  end

  # Check out appropriate version of the repo
  cmd = "(cd #{tmpdir} && git checkout #{appvers})"
  puts cmd
  system cmd
  if $? != 0
    exit 1
  end

  # Return the tmp directory path 
  puts tmpdir
  tmpdir
end

def cleanup(workdir, is_temp)
  # clean up
  puts "Cleaning up..."
  FileUtils.rm_rf workdir if is_temp
end

def install_deps(workdir, appname = nil, stack = [])
  # Process any dependencies in workdir/erlbox.yaml
  app_config = load_yaml("#{workdir}/erlbox.yaml")
  unless app_config.nil? || app_config.empty?
    deps = app_config['dependencies'] || []
    deps.each do |dep|
      install_app(dep, stack << appname)
    end
  end
end

def install_app(appname, stack = [])
  puts "Installing #{appname}"
  # Check for a dependency cycle
  if stack.include?(appname)
    puts "#{appname} already scheduled for installation"
    return
  end

  # Split app name on whitespace -- we pass the desired tag/branch in this way
  if not appname.nil?
    app_parts = appname.split(nil, 2)
    if app_parts.length == 2
      appname = app_parts[0]
      appvers = app_parts[1]
    else
      appvers = "HEAD"
    end
  end

  # Default workdir is current working directory -- examination of appname may 
  # override this.
  workdir = ""
  is_temp = false

  if appname.nil? || appname.empty?
    # Appname was not specified -- we'll try to use the current directory
    workdir = Dir.getwd
  else
    # Parse appname as URI
    appname_uri = URI.parse(appname)
    if appname_uri.scheme == nil or appname_uri.scheme == "file"
      # Expand the file path -- however, it may not match anything local; in that
      # case, prepend the default URL for git repos and try to get it from there.
      appname_path = File.expand_path(appname_uri.path)
      if File.directory?(appname_path)
        workdir = appname_path
      else
        workdir = download_app(appname, File.join(CONFIG['default_repo'], appname), appvers)
        is_temp = true
      end
    else
      # Appname is a proper URL -- we'll pass this to git
      workdir = download_app(appname, appname, appvers)
      is_temp = true
    end
  end

  # Now check the work directory for a Rakefile
  if !File.exist?(File.join(workdir, "Rakefile"))
    puts "No Rakefile available for #{appname} in #{workdir}; can't install this app!"
    exit 1
  end

  appid = `(cd #{workdir} && rake --silent install:appid[#{CONFIG['erlang_root']}])`.strip
  install_dir = File.join(CONFIG['site_dir'], appid)

  # Check that the target directory doesn't already exist -- bail if it does
  if File.directory?(install_dir)
    puts "#{appid} is already installed...skipping"
    cleanup(workdir, is_temp)
    return
  end

  install_deps(workdir, appname, stack)

  # Tell the app to build itself and install in the provided site directory
  # TODO: Handle downloads of pre-built stuff

  # Run the prepare task in a separate rake process so that computed
  # dependencies will work out right
  system "(cd #{workdir} && rake --silent install:prepare)"
  system "(cd #{workdir} && rake --silent install:build)"

  if $? == 0
    puts "Installing to #{install_dir}..."
    FileUtils.mkdir install_dir
    FileUtils.cp_r "#{workdir}/ebin", install_dir
    FileUtils.cp_r "#{workdir}/src", install_dir
    FileUtils.cp_r "#{workdir}/include", install_dir if File.exist?("#{workdir}/include")
    FileUtils.cp_r "#{workdir}/priv", install_dir if File.exist?("#{workdir}/priv")
    FileUtils.cp_r "#{workdir}/mibs", install_dir if File.exist?("#{workdir}/mibs")

    puts "Install successful..."
    cleanup(workdir, is_temp)
  else
    puts "Rake failed! Build files are in '#{workdir}'."
  end
end

CONFIG = load_config()

action = ARGV[0]
case action
when 'install'
  if ARGV.length > 2
    install_app(ARGV[1] + " " + ARGV[2])
  else
    install_app(ARGV[1])
  end
when 'cleanup'
  FileUtils.rm_rf Dir.glob("/tmp/erlbox_*")
when 'ensure'
  install_deps(Dir.getwd())
else
  puts "Usage: erlbox install ..."
end
